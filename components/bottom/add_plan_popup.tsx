"use client";
import { CreateDispatchPlan$Params } from "@/lib/commands/CreateDispatchPlan/typing";
import { MenuItem, Select } from "@mui/material";
import React from "react";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import DatePicker from "react-datepicker";
import { CLIENT_ENV } from "@/lib/env";

// Configure dayjs to use GMT+0 (UTC) for consistency
dayjs.extend(utc);

type Props = {
  isOpen: boolean;
  onClose: () => void;
  onSave: (params: CreateDispatchPlan$Params) => Promise<void>;
  onRefresh?: () => void;
  token: string;
};

const AddPlanPopup = ({ isOpen, onClose, onSave, onRefresh, token }: Props) => {
  const [date, setDate] = React.useState<string>('');
  const [isAutoOptimized, setIsAutoOptimized] = React.useState("false");
  const [isLoading, setIsLoading] = React.useState(false);

  // Don't render if popup is not open
  if (!isOpen) return null;

  const handleSave = async () => {
    if (!date) {
      alert("Invalid date!");
      return;
    }

    setIsLoading(true);
    try {
      if (isAutoOptimized === "true") {
        // Call optimize API
        const response = await fetch(`${CLIENT_ENV.BACKEND_URL}/api/dispatch/optimize`, {
          method: 'POST',
          headers: {
            'accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            date: date + 'T00:00:00.000Z',
            algorithm: "greedy"
          })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('Optimize API result:', result);
        
        // Trigger refresh after optimize API call
        if (onRefresh) {
          onRefresh();
        }
      } else {
        // Call create dispatch plan with autogenerated=False
        await onSave({
          date: date + 'T00:00:00.000Z',
          is_auto_generated: false,
        });
      }
      
      onClose();
    } catch (error) {
      console.error('Error saving plan:', error);
      alert(`Error: ${error instanceof Error ? error.message : 'Failed to save plan'}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-md mx-4 p-8 flex flex-col gap-6 font-sans">
        <h2 className="text-2xl font-bold text-emerald-700 mb-2">Add Plan</h2>
        <form className="flex flex-col gap-4">
          <div className="flex flex-col gap-1">
            <label className="text-base font-semibold text-gray-700 mb-1">Date</label>
            <input
              type="date"
              value={date}
              onChange={e => setDate(e.target.value)}
              className="rounded-lg border border-gray-300 px-3 py-2 text-base focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-200 bg-gray-50"
            />
          </div>
          <div className="flex flex-col gap-1">
            <label className="text-base font-semibold text-gray-700 mb-1">Auto-Optimized</label>
            <select
              value={isAutoOptimized}
              onChange={e => setIsAutoOptimized(e.target.value)}
              className="rounded-lg border border-gray-300 px-3 py-2 text-base focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-200 bg-gray-50"
            >
              <option value="false">False</option>
              <option value="true">True</option>
            </select>
          </div>
        </form>
        <div className="flex gap-4 mt-6 justify-end">
          <button
            type="button"
            onClick={onClose}
            disabled={isLoading}
            className="px-6 py-2 bg-gray-200 text-gray-700 rounded-full font-semibold hover:bg-gray-300 transition-colors duration-200 shadow-sm disabled:opacity-50"
          >
            Cancel
          </button>
          <button
            type="button"
            onClick={handleSave}
            disabled={isLoading}
            className="px-6 py-2 bg-emerald-500 text-white rounded-full font-semibold hover:bg-emerald-600 transition-colors duration-200 shadow-sm disabled:opacity-50"
          >
            {isLoading ? 'Saving...' : 'Save'}
          </button>
        </div>
      </div>
    </div>
  );
};

export { AddPlanPopup };
