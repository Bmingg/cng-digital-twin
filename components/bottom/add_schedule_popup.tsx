"use client";
import { CreateDispatchPlan$Params } from "@/lib/commands/CreateDispatchPlan/typing";
import { MenuItem, Select } from "@mui/material";
import React from "react";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import DatePicker from "react-datepicker";

// Configure dayjs to use GMT+7
dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.tz.setDefault('Asia/Bangkok');

type Props = {
  isOpen: boolean;
  onClose: () => void;
  onSave: (params: CreateDispatchPlan$Params) => Promise<void>;
};

const AddSchedulePopup = ({ isOpen, onClose, onSave }: Props) => {
  const [date, setDate] = React.useState<Date | null>();
  const [isAutoGenerated, setIsAutoGenerated] = React.useState("false");

  // Don't render if popup is not open
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-md mx-4 p-8 flex flex-col gap-6 font-sans">
        <h2 className="text-2xl font-bold text-emerald-700 mb-2">Add Schedule</h2>
        <form className="flex flex-col gap-4">
          <div className="flex flex-col gap-1">
            <label className="text-base font-semibold text-gray-700 mb-1">Date</label>
            <input
              type="date"
              value={date ? dayjs(date).tz('Asia/Bangkok').format('YYYY-MM-DD') : ''}
              onChange={e => {
                const value = e.target.value;
                if (value) {
                  setDate(dayjs.tz(value, 'Asia/Bangkok').toDate());
                } else {
                  setDate(null);
                }
              }}
              className="rounded-lg border border-gray-300 px-3 py-2 text-base focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-200 bg-gray-50"
            />
          </div>
          <div className="flex flex-col gap-1">
            <label className="text-base font-semibold text-gray-700 mb-1">Autogenerated</label>
            <select
              value={isAutoGenerated}
              onChange={e => setIsAutoGenerated(e.target.value)}
              className="rounded-lg border border-gray-300 px-3 py-2 text-base focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-200 bg-gray-50"
            >
              <option value="false">False</option>
              <option value="true">True</option>
            </select>
          </div>
        </form>
        <div className="flex gap-4 mt-6 justify-end">
          <button
            type="button"
            onClick={onClose}
            className="px-6 py-2 bg-gray-200 text-gray-700 rounded-full font-semibold hover:bg-gray-300 transition-colors duration-200 shadow-sm"
          >
            Cancel
          </button>
          <button
            type="button"
            onClick={async () => {
              if (!date) {
                alert("Invalid date!");
                return;
              }
              await onSave({
                date: dayjs(date).tz('Asia/Bangkok').format('YYYY-MM-DD'),
                is_auto_generated: isAutoGenerated === "true",
              });
            }}
            className="px-6 py-2 bg-emerald-500 text-white rounded-full font-semibold hover:bg-emerald-600 transition-colors duration-200 shadow-sm"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
};

export { AddSchedulePopup };
